- toán tử instanceof dùng kiểm tra một đối tượng là thể hiện của lớp nào (new cái nào thì chính là instance của cái đó, kiểu dữ liệu không quan trọng)
	 ví dụ: SanPham s1 = new Sach();
	 			if(s1 instanceof Sach){
	 			System.out.println(""true);
	 			} else {
	 				System.out.println("false");
	 			}

//----------lớp Object----------
- toString(): trả về chuỗi đại diện cho đối tượng
- equals(Object obj) kiểm tra hai đối tượng có bằng nhau
- hashCode() trả về mẵ băm của đối tượng
- clone() sao chép đối tượng ra đối tượng mới nhưng bộ nhớ trên heap khác nhau
- getClass(): trả về lớp mà đối tượng được tạo ra

- ví dụ: lớp SanPham ghi đè lại phương thức tooString()
		class SanPham {
			//...
			@Override
			public String toString() {
			return String.format("- Mã SP: %s/n- Tên SP: %s/n", this.maSP, this.tenSP);
			}
		}
		
		--> sau khi đã override lại toString thì khi print cái object ra sẽ ra theo cái format mình mới override lại
			SanPham sp = new Sach();
			System.out.println(sp)
			
- ví dụ: phương thức equals() và hashCode()
	 	class SanPham {
	 		//...
	 		@Override
	 		// ----- cái phương thức equals là phương thức chung do đó cái tham số 'obj' truyền vào có kiểu là 'Object' chứ không phải kiểu 'SanPham' hay 'BangDia' gì cả
	 		public boolean equals (Object obj) {
	 			// ----- equals có hai tham số, một là tham số this, và tham số thứ hai là tham số so sánh 'obj'-----
	 			// ----- khi Override lại phương thức equals ở trong lớp nào thì cái 'obj' truyền vào là chính cái instance của cái lớp đó, do đó dòng đầu tiên khi Override lại phương thức equals  phải ép kiểu 'obj' về kiểu của lớp, để có thể lấy được các thuộc tính của nó
	 			
	 			SanPham sp = (SanPham) obj;
	 			return this.maSP.toLowerCase().equals(sp.maSP.toLowerCase());
	 		}
	 		@Override
	 		public int hashCode() {
	 			int hash = 5;
	 			hash = 97 * hash + Object.hashCode(this.maSp);
	 			return hash;
	 		}



